[["index.html", "Data Network Dashboards Preface Contributors Considerations License Acknowledges", " Data Network Dashboards This document is currently under construction 2020-11-07 Preface Automated Characterization of Health Information at Large-scale Longitudinal Evidence Systems (ACHILLES) is a profiling tool developed by the OHDSI community to provide descriptive statistics of databases standardized to the OMOP Common Data Model. These characteristics are presented graphically in the ATLAS tool. However, this solution does not allow for database comparison across the data network. The Data Network Dashboards aggregates ACHILLES results files from databases in the network and displays the descriptive statistics through graphical dashboards. This tool is helpful to gain insight in the growth of the data network and is useful for the selection of databases for specific research questions. In the software demonstration we show a first version of this tool that will be further developed in EHDEN in close collaboration with all our stakeholders, including OHDSI. Contributors To develop this tool, EHDEN organized a hack-a-thon (Aveiro, December 2-3, 2019), where we defined and implemented a series of charts and dashboards containing the most relevant information about the OMOP CDM databases. The team involved in this task were composed by the following members: Joo Rafael Almeida1 Andr Pedrosa1 Peter R. Rijnbeek2 Marcel de Wilde2 Michel Van Speybroeck3 Maxim Moinat4 Pedro Freire1 Alina Trifan1 Srgio Matos1 Jos Lus Oliveira1 1 - Institute of Electronics and Informatics Engineering of Aveiro, Department of Electronics and Telecommunication, University of Aveiro, Aveiro, Portugal 2 - Erasmus MC, Rotterdam, Netherlands 3 - Janssen Pharmaceutica NV, Beerse, Belgium 4 - The Hyve, Utrecht, Netherlands Considerations This manual was written to be a guide for a clean installation of this system with all the dashboards that we defined during the project. The first chapter describes the goal of the system and the second how to install the system. The remaining chapters are dedicated to the dashboards, in which chapters describes one dashboard and all its charts. To simplify the representation of the dashboards layout, we used similar schemas as it is presented in Figure 0.1. The white box is the dashboard and the inside boxes are charts. The colour changes in relation to the type of chart. Figure 0.1: Example of a dashboards tool presenting the databases available in the network (simulated data) License The system is open-source and this manual was written in RMarkdown using the bookdown package. Acknowledges This work has been conducted in the context of EHDEN, a project that receives funding from the European Unions Horizon 2020 and EFPIA through IMI2 Joint Undertaking initiative, under grant agreement No 806968. "],["introduction.html", "Chapter 1 Introduction 1.1 Data Network Dashboard", " Chapter 1 Introduction The OHDSI research network has been growing steadily which results in an increasing number of healthcare databases standardized to the OMOP CDM format. The OHDSI community created the ACHILLES tool (Automated Characterization of Health Information at Large-scale Longitudinal Exploration System) to characterize those databases. The results are available to the data custodian in their local ATLAS tool and helps them to gain insights in their data and helps in assessing the feasibility of a particular research questions. ACHILLES was designed to extract the metadata from a single database, which by itself does not allow the comparison with the remaining databases in the network. However, we believe there is even more value in sharing this information with others to enable network research in a Data Network Dashboard. 1.1 Data Network Dashboard The European Health Data and Evidence Network (EHDEN) project therefore designed a Data Network Dashboard tool, a web application to aggregate information from distributed OMOP CDM databases. It uses the ACHILLES results files to construct graphical dashboards and enables database comparison (Figure 1.1). The tool is built on Apache Superset, which is an open-source enterprise-ready business intelligence web application that can provide powerful and fully customizable graphical representations of data. Achilles results can be uploaded through the EHDEN Database Catalogue using the dashboards plugin but can also be directly uploaded in the tool. Figure 1. Example of a dashboards tool presenting age and gender distributions (simulated data). Figure 1.1: Example of a dashboards tool presenting the databases available in the network (simulated data) In this tools, we defined and implemented a series of charts and dashboards containing the most relevant information about the databases, such as: General: dashboards that shows the databases types per country, the distribution of data source types, the growth of the Network including the number of database and the number of patients in the databases over time; Person: representing the number of patients per country, age distribution at first observation, year of birth distribution and normalized gender distribution; Population characteristics: dashboard with the cumulative patient time, persons with continuous observation per month, and the start and end dates of those periods; Visit: chart to compare the number and type of visit occurrence records; Death: information about the number of death records by month, and the patient age at time of death; Concepts: bubble chart which shows the number of patients and records per concept over the databases; Data domains: heat map visualization of the major data domains in each database. "],["installation.html", "Chapter 2 Installation 2.1 First Steps 2.2 Dashboard Viewer setup 2.3 Insert Concepts 2.4 Superset setup 2.5 Dummy data", " Chapter 2 Installation Currently, we use docker to deploy our environment 2.1 First Steps Clone the repository with the command git clone --recurse-submodules https://github.com/EHDEN/NetworkDashboards. If you already cloned the repository without the --recurse-submodules option, run git submodule update --init to fetch the superset submodule. Create a .env file on the docker directory, using .env-example as a reference, setting all necessary environment variables (SUPERSET\\_MAPBOX\\_API\\_KEY and DASHBOARD\\_VIEWER\\_SECRET\\_KEY). 2.2 Dashboard Viewer setup If you wish to expose the dashboard viewer app through a specific domain(s) you must add it/them to the ALLOWED_HOSTS list on file dashboard_viewer/dashboard_viewer/settings.py and remove the '*' entry. Build containers images: docker-compose build. This might take several minutes. Set up the database and create an admin account for the dashboard viewer app: docker-compose run --rm dashboard ./docker-init.sh. 2.3 Insert Concepts The concepts table is not in the repository due to its dimension, therefore we use directly the Postgres console to insert this table in the installation. Get your concept csv file from Athena Copy the file into postgres container docker cp concept.csv dashboard_viewer_postgres_1:/tmp/ Enter in the postgres container: docker exec -it dashboard_viewer_postgres_1 bash Enter in the achilles database (value of the variable POSTGRES_ACHILLES_DB on the .env file) with the root user (value of the variable POSTGRES_ROOT_USER on the .env file): psql achilles root Create the concept table CREATE TABLE concept ( concept_id INTEGER NOT NULL, concept_name VARCHAR(255) NOT NULL, domain_id VARCHAR(20) NOT NULL, vocabulary_id VARCHAR(20) NOT NULL, concept_class_id VARCHAR(20) NOT NULL, standard_concept VARCHAR(1) NULL, concept_code VARCHAR(50) NOT NULL, valid_start_date DATE NOT NULL, valid_end_date DATE NOT NULL, invalid_reason VARCHAR(1) NULL ); Copy the CSV file content to the table (this could take a while) To get both ' (single quotes) and \" (double quotes) on the concept_name column we use a workaround by setting the quote character to one that should never be in the text. Here we used \\b (backslash). COPY public.concept FROM &#39;/tmp/concept.csv&#39; WITH CSV HEADER DELIMITER E&#39;\\t&#39; QUOTE E&#39;\\b&#39;; Create index in table (this could take a while): CREATE INDEX concept_concept_id_index ON concept (concept_id); CREATE INDEX concept_concept_name_index ON concept (concept_name); Set the owner of the concept table to the achilles user (value of the variable POSTGRES_ACHILLES_USER on the .env file): ALTER TABLE concept OWNER TO achiller Bring up the containers: docker-compose up -d. Run the command docker-compose run --rm dashboard python manage.py generate_materialized_views to create the materialized views on Postgres. 2.4 Superset setup Make sure that the container superset-init has finished before continuing. It is creating the necessary tables on the database and creating permissions and roles. Execute the script ./superset/one_time_run_scripts/superset-init.sh. This will create an admin account and associate theachillesdatabase to Superset.Attention:You must be in the docker directory to execute this script. We have already built some dashboards so if you want to import them run the script ./superset/one_time_run_scripts/load_dashboards.sh. Attention: You must be in the docker directory to execute this script. If you used the default ports: Go to http://localhost to access the dashboard viewer app. Go to http://localhost:8088 to access superset. On release 0.37 of Superset, there is a bug related to the public role and because of that, we had to set PUBLIC_ROLE_LIKE_GAMMA = True on Superset settings. This leads the public role with permissions that he shouldnt have. To solve this, so any anonymous user can view dashboards, you should remove all its permissions and then add the following: can explore JSON on Superset can dashboard on Superset all datasource access on all_datasource_access can csrf token on Superset can list on CssTemplateAsyncModelView 2.5 Dummy data On a fresh installation, there are no achilles_results data so Supersets dashboards will display No results. On the root of this repository, you can find the demo directory where we have an ACHILLES results file with synthetic data that you can upload to a data source on the uploader app of the dashboard viewer (localhost/uploader). If you wish to compare multiple data sources, on the demo directory the is also a python script that allows you to generate new ACHILLES results files, where it generates random count values based on the ranges of values for each set of analysis_id and stratums present on a base ACHILLES results file. So, from the one ACHILLES results fill we provided, you can have multiple data sources with different data. "],["general.html", "Chapter 3 General 3.1 CSS 3.2 Database Type and Country Filter 3.3 Total Number of Patients 3.4 Network Growth by Date 3.5 Patients per Country 3.6 Database Types per Country 3.7 World Map 3.8 Meta Data", " Chapter 3 General 3.1 CSS To hide the dashboard header insert the following css code to the CSS field on the edit page: .dashboard &gt; div:not(.dashboard-content) { /* dashboard header */ display: none; } 3.2 Database Type and Country Filter Figure 3.1: Settings for creating filters charts Theses filter were designed to be used in the dashboard aiming the filtering of the data based on the field database_type and country from the table data_source. For the filters to work the name of the fields to filter should match in all tables used on the charts of this dashboard. 3.2.1 SQL query SELECT source.name, country.country, source.database_type, source.acronym FROM public.data_source AS source INNER JOIN public.country AS country ON source.country_id=country.id 3.2.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Filter Box Time Time range: No filter Filters Configuration Filters: database_type or country Date Filter: off Instant Filtering: on 3.3 Total Number of Patients Figure 3.2: Settings for creating the Total Number of Patients chart 3.3.1 SQL query SELECT country, database_type, release_date, SUM(count_value) OVER (ORDER BY release_date ASC) FROM achilles_results JOIN data_source ON data_source_id = data_source.id JOIN country ON data_source.country_id = country.id WHERE analysis_id = 1 3.3.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Big Number with Trendline Time Time range: No filter Query Metrics: MAX(sum) Series: release_date Breakdowns: source Customize Tab Chart Options Big Number Font Size: Small Subheader Font Size: Tiny 3.4 Network Growth by Date Figure 3.3: Settings for creating the Network Growth by Date chart 3.4.1 SQL query SELECT source.name AS source, country.country, source.database_type, source.release_date, concepts.concept_name AS gender, achilles.count_value as count FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.country AS country ON source.country_id=country.id JOIN ( SELECT &#39;8507&#39; AS concept_id, &#39;Male&#39; AS concept_name UNION SELECT &#39;8532&#39;, &#39;Female&#39; ) AS concepts ON achilles.stratum_1 = concept_id WHERE analysis_id = 2 3.4.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: SUM(count_value) Series: release_date Breakdowns: source Customize Tab Chart Options Stacked Bars: on Sort Bars: on Extra Controls: on X Axis Reduce X ticks: on 3.5 Patients per Country Figure 3.4: Settings for creating the Patients per Country chart 3.5.1 SQL query SELECT country.country, source.database_type, count_value FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.country AS country ON source.country_id=country.id WHERE analysis_id = 1 3.5.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: SUM(count_value) Series: country Customize Tab Chart Options Legend: off Y Axis Label: N of Patients X Axis X Axis Label: Country 3.6 Database Types per Country Figure 3.5: Settings for creating the Database Type per Country chart 3.6.1 SQL query Same as Patients per Country query SELECT country.country, source.database_type, count_value FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.country AS country ON source.country_id=country.id WHERE analysis_id = 1 3.6.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Heatmap Time Time range: No filter Query X: country Y: database_type Metric: SUM(countr_value) Heatmap Options Left Margin: 75 Show Percentage: off 3.7 World Map Figure 3.6: Settings for creating the World Map chart 3.7.1 SQL query SELECT name, acronym, database_type, latitude, longitude, country FROM public.data_source AS source INNER JOIN public.country AS country ON source.country_id=country.id 3.7.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: MapBox Time Time range: No filter Query Longitude: longitude Latitude: latitude Visual Tweaks Map Style: Streets or Light or Outdoors 3.8 Meta Data Figure 3.7: Settings for creating the Meta Data chart 3.8.1 SQL query SELECT acronym, stratum_1 as &quot;name&quot;, database_type, country, stratum_2 as &quot;source_release_date&quot;, stratum_3 as &quot;cdm_release_date&quot;, stratum_4 as &quot;cdm_version&quot;, stratum_5 as &quot;vocabulary_version&quot; FROM achilles_results JOIN data_source ON achilles_results.data_source_id = data_source.id JOIN country ON data_source.country_id = country.id WHERE analysis_id=5000 3.8.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Table Time Time range: No filter Query Query Mode: Raw Records Columns: name, source_release_date, cdm_release_date, cdm_version, vocabulary_version "],["person.html", "Chapter 4 Person 4.1 Label Colors 4.2 CSS 4.3 Data Source Filter 4.4 Age at first observation - Table 4.5 Age at first observation - Bars 4.6 Year of Birth 4.7 Gender", " Chapter 4 Person 4.1 Label Colors In order to obtain the colours blue and rose in the chart representing the gender distribution, add the following JSON entry to the JSON object of the JSON Metadata field on the edit dashboard page: &quot;label_colors&quot;: { &quot;Male&quot;: &quot;#3366FF&quot;, &quot;Female&quot;: &quot;#FF3399&quot; } 4.2 CSS To hide the dashboard header insert the following css code to the CSS field on the edit page: .dashboard &gt; div:not(.dashboard-content) { /* dashboard header */ display: none; } 4.3 Data Source Filter Figure 4.1: Settings for creating the Data Source filter chart For the filter to work the name of the fields to filter should match in all tables used on the charts of this dashboard. 4.3.1 SQL query No SQL query, use the sql table data_source of the achilles database. 4.3.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Filter Box Time Time range: No filter Filters Configuration Filters: name Date Filter: off Instant Filtering: on 4.4 Age at first observation - Table Figure 4.2: Settings for creating the Age at First Observation Table chart 4.4.1 SQL query SELECT source.name, source.acronym, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &lt; 10 THEN count_value END) AS &quot;0-10&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 10 AND CAST(stratum_2 AS INTEGER) &lt; 20 THEN count_value END) AS &quot;10-20&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 20 AND CAST(stratum_2 AS INTEGER) &lt; 30 THEN count_value END) AS &quot;20-30&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 30 AND CAST(stratum_2 AS INTEGER) &lt; 40 THEN count_value END) AS &quot;30-40&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 40 AND CAST(stratum_2 AS INTEGER) &lt; 50 THEN count_value END) AS &quot;40-50&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 50 AND CAST(stratum_2 AS INTEGER) &lt; 60 THEN count_value END) AS &quot;50-60&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 60 AND CAST(stratum_2 AS INTEGER) &lt; 70 THEN count_value END) AS &quot;60-70&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 70 AND CAST(stratum_2 AS INTEGER) &lt; 80 THEN count_value END) AS &quot;70-80&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 80 AND CAST(stratum_2 AS INTEGER) &lt; 90 THEN count_value END) AS &quot;80-90&quot;, SUM(CASE WHEN CAST(stratum_2 AS INTEGER) &gt;= 90 THEN count_value END) AS &quot;90+&quot; FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.concept ON CAST(stratum_1 AS BIGINT) = concept_id WHERE analysis_id = 102 GROUP BY name, acronym 4.4.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Table Time Time range: No filter Query Query Mode: Raw Records Columns: name, 0-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-90, 90+ Customize Tab Options Show Cell Bars: off 4.5 Age at first observation - Bars Figure 4.3: Settings for creating the Age at First Observation Bar chart 4.5.1 SQL query SELECT source.name, cast(stratum_1 AS int) AS Age, count_value AS count, source.acronym FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id WHERE analysis_id = 101 4.5.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: MAX(count) Series: age Breakdowns: name Customize Tab Chart Options Stacked Bars: on Sort Bars: on Y Axis Label: Count X Axis X Axis Label: Age Reduce X ticks: on 4.6 Year of Birth Figure 4.4: Settings for creating the Year of Birth chart 4.6.1 SQL query SELECT source.name, source.acronym, stratum_1 AS &quot;Birth_year&quot;, count_value AS count FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id WHERE analysis_id = 3 4.6.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: SUM(count) Series: Birth_year Breakdowns: name Customize Tab Chart Options Stacked Bars: on Sort Bars: on Y Axis Label: Count Extra Controls: on X Axis X Axis Label: Year Reduce X ticks: on 4.7 Gender Figure 4.5: Settings for creating the Gender chart 4.7.1 SQL query SELECT source.name, concept_name AS Gender, count_value AS Number_of_persons, source.acronym FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id JOIN ( SELECT &#39;8507&#39; AS concept_id, &#39;Male&#39; AS concept_name UNION SELECT &#39;8532&#39; AS concept_id, &#39;Female&#39; AS concept_name ) AS concepts ON achilles.stratum_1 = concept_id WHERE analysis_id = 2 4.7.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: MAX(Number_of_persons) Series: acronym Breakdowns: gender Contribution: on Customize Tab Chart Options Stacked Bars: on Sort Bars: on Extra Controls: on X Axis Reduce X ticks: on "],["observation-period.html", "Chapter 5 Observation Period 5.1 CSS 5.2 Data Source Filter 5.3 Number of Patients in Observation Period 5.4 Observation Period Start Dates 5.5 Observation Period End Dates", " Chapter 5 Observation Period 5.1 CSS To hide the dashboard header insert the following css code to the CSS field on the edit page: .dashboard &gt; div:not(.dashboard-content) { /* dashboard header */ display: none; } 5.2 Data Source Filter Figure 4.1: Settings for creating the Data Source filter chart For the filter to work the name of the fields to filter should match in all tables used on the charts of this dashboard. 5.2.1 SQL query No SQL query, use the sql table data_source of the achilles database. 5.2.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Filter Box Time Time range: No filter Filters Configuration Filters: name Date Filter: off Instant Filtering: on 5.3 Number of Patients in Observation Period Figure 5.1: Settings for creating the Number of Patients in Observation Period chart 5.3.1 SQL query SELECT source.name, source.acronym, to_date(stratum_1, &#39;YYYYMM&#39;) as Date, count_value FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id WHERE analysis_id = 110 5.3.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: MAX(count_value) with label Num of Patients Series: date Breakdowns: name Customize Tab Chart Options Stacked Bars: on Sort Bars: on Y Axis Label: Number of Patients X Axis X Axis Label: Dates Reduce X ticks: on 5.4 Observation Period Start Dates Figure 5.2: Settings for creating the Observation Period Start Dates chart 5.4.1 SQL query SELECT source.name, source.acronym, to_date(stratum_1, &#39;YYYYMM&#39;) AS year_month, count_value FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id WHERE analysis_id = 111 5.4.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: SUM(count_value) with label Patients Series: year_month Breakdowns: name Customize Tab Chart Options Stacked Bars: on Sort Bars: on Y Axis Label: Number of Patients X Axis X Axis Label: Year Reduce X ticks: on 5.5 Observation Period End Dates Figure 5.3: Settings for creating the Observation Period End Dates chart 5.5.1 SQL query SELECT source.name, source.acronym, to_date(stratum_1, &#39;YYYYMM&#39;) AS year_month, count_value FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id WHERE analysis_id = 112 5.5.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: SUM(count_value) with label Patients Series: year_month Breakdowns: name Customize Tab Chart Options Stacked Bars: on Sort Bars: on Y Axis Label: Number of Patients X Axis X Axis Label: Year Reduce X ticks: on "],["visit.html", "Chapter 6 Visit 6.1 CSS 6.2 Data Source Filter 6.3 Visit Type Table 6.4 Visit Types Bars", " Chapter 6 Visit This dashboard shows the different types of visits per data source (see Visit Occurence Table) 6.1 CSS To hide the dashboard header insert the following css code to the CSS field on the edit page: .dashboard &gt; div:not(.dashboard-content) { /* dashboard header */ display: none; } 6.2 Data Source Filter Figure 4.1: Settings for creating the Data Source filter chart For the filter to work the name of the fields to filter should match in all tables used on the charts of this dashboard. 6.2.1 SQL query No SQL query, use the sql table data_source of the achilles database. 6.2.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Filter Box Time Time range: No filter Filters Configuration Filters: name Date Filter: off Instant Filtering: on 6.3 Visit Type Table Figure 6.1: Settings for creating the Visit Type Table chart 6.3.1 SQL query SELECT source.name, source.acronym, concept_name AS &quot;Type&quot;, MAX(count_value) AS &quot;Count&quot; FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.concept ON CAST(stratum_1 AS BIGINT) = concept_id WHERE analysis_id = 201 GROUP BY name, acronym, &quot;Type&quot; ORDER BY &quot;Count&quot; DESC 6.3.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Table Time Time range: No filter Query Query Mode: Raw Records Columns: name with label Data Source, Type, Count 6.4 Visit Types Bars Figure 6.2: Settings for creating the Visit Types bar chart 6.4.1 SQL query SELECT source.name, source.acronym, concept_name AS &quot;Observation&quot;, count_value FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.concept ON CAST(stratum_1 AS BIGINT) = concept_id WHERE analysis_id = 201 6.4.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: MAX(count_value) with label Observations Series: name Breakdowns: Observation Customize Tab Chart Options Stacked Bars: on Sort Bars: on Extra Controls: on X Axis X Axis Label: Databases Reduce X ticks: on "],["death.html", "Chapter 7 Death 7.1 CSS 7.2 Data Source Filter 7.3 Number of Records 7.4 Death By Year per Thousand People", " Chapter 7 Death 7.1 CSS To hide the dashboard header insert the following css code to the CSS field on the edit page: .dashboard &gt; div:not(.dashboard-content) { /* dashboard header */ display: none; } 7.2 Data Source Filter Figure 4.1: Settings for creating the Data Source filter chart For the filter to work the name of the fields to filter should match in all tables used on the charts of this dashboard. 7.2.1 SQL query No SQL query, use the sql table data_source of the achilles database. 7.2.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Filter Box Time Time range: No filter Filters Configuration Filters: name Date Filter: off Instant Filtering: on 7.3 Number of Records Figure 7.1: Settings for creating the Number of Records chart 7.3.1 SQL query SELECT source.name, count_value, source.acronym FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id WHERE analysis_id = 501 7.3.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: MAX(count_value) with label Count Series: name Customize Tab Chart Options Y Axis Label: Number of Patients X Axis X Axis Label: Databases Reduce X ticks: on 7.4 Death By Year per Thousand People Figure 7.2: Settings for creating the Death by Year per Thousand People chart 7.4.1 SQL query SELECT source.name, source.acronym, EXTRACT(year FROM TO_DATE(stratum_1, &#39;YYYYMM&#39;)) AS Date, count_value FROM public.achilles_results as achilles INNER JOIN public.data_source as source ON achilles.data_source_id=source.id WHERE analysis_id = 502 7.4.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Bar Chart Time Time range: No filter Query Metrics: MAX(count_value) with label Count Series: date Breakdowns: name Customize Tab Chart Options Stacked Bars: on Sort Bars: on Y Axis Label:Number of Patients (in thousands) X Axis X Axis Label: Years Reduce X ticks: on "],["concepts-browser.html", "Chapter 8 Concepts Browser 8.1 Data Source and Domain Filters 8.2 Number of Concepts 8.3 Concept Browser Table", " Chapter 8 Concepts Browser The concepts browser allows you to search for concepts by name or concept_id in all the data sources you select. No exact number of patients or occurrences are provided but the magnitude of both. 8.1 Data Source and Domain Filters Figure 3.1: Settings for creating the Data Source and Domain filter charts For the filters to work the name of the fields to filter should match in all tables used on the charts of this dashboard. 8.1.1 SQL query SELECT concept_name, domain_id, source.name AS source_name, source.acronym FROM achilles_results JOIN concept ON cast(stratum_1 AS BIGINT) = concept_id INNER JOIN public.data_source AS source ON data_source_id=source.id WHERE analysis_id in (201, 401, 601, 701, 801, 901, 1001, 1801, 200, 400, 600, 700, 800, 1800) 8.1.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Filter Box Time Time range: No filter Filters Configuration Filters: source_name or domain_id Date Filter: off Instant Filtering: on 8.2 Number of Concepts Figure 8.1: Settings for creating the Number of Concepts chart 8.2.1 SQL Query Same as Data Source and Domain filters query SELECT concept_name, domain_id, source.name AS source_name, source.acronym FROM achilles_results JOIN concept ON cast(stratum_1 AS BIGINT) = concept_id INNER JOIN public.data_source AS source ON data_source_id=source.id WHERE analysis_id in (201, 401, 601, 701, 801, 901, 1001, 1801, 200, 400, 600, 700, 800, 1800) 8.2.2 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Big Number Time Time range: No filter Query Metric: COUNT_DISTINCT(concept_name) with label Concepts Customize Tab Big Number Font Size: Small Subheader Font Size: Tiny 8.3 Concept Browser Table Figure 8.2: Settings for creating the Concepts Table chart SELECT q1.concept_id AS concept_id, q1.concept_name AS concept_name, q1.domain_id, source.name AS source_name, source.acronym, sum(q1.count_value) as &quot;Occurrence_count&quot;, sum(q1.count_person) as &quot;Person_count&quot;, CASE WHEN sum(q1.count_value)&lt;=10 THEN &#39;&lt;=10&#39; WHEN sum(q1.count_value)&lt;=100 THEN &#39;11-102&#39; WHEN sum(q1.count_value)&lt;=1000 THEN &#39;102-103&#39; WHEN sum(q1.count_value)&lt;=10000 THEN &#39;103-104&#39; WHEN sum(q1.count_value)&lt;=100000 THEN &#39;104-105&#39; WHEN sum(q1.count_value)&lt;=1000000 THEN &#39;105-106&#39; ELSE &#39;&gt;106&#39; END as &quot;magnitude_occurrences&quot;, CASE WHEN sum(q1.count_person)&lt;=10 THEN &#39;&lt;=10&#39; WHEN sum(q1.count_person)&lt;=100 THEN &#39;11-102&#39; WHEN sum(q1.count_person)&lt;=1000 THEN &#39;102-103&#39; WHEN sum(q1.count_person)&lt;=10000 THEN &#39;103-104&#39; WHEN sum(q1.count_person)&lt;=100000 THEN &#39;104-105&#39; WHEN sum(q1.count_person)&lt;=1000000 THEN &#39;105-106&#39; ELSE &#39;&gt;106&#39; END AS &quot;magnitude_persons&quot; FROM (SELECT analysis_id, stratum_1 concept_id, data_source_id, concept_name, domain_id, count_value, 0 as count_person FROM achilles_results JOIN concept ON cast(stratum_1 AS BIGINT)=concept_id WHERE analysis_id in (201, 301, 401, 601, 701, 801, 901, 1001, 1801) UNION (SELECT analysis_id, stratum_1 concept_id, data_source_id, concept_name, domain_id, 0 as count_value, sum(count_value) as count_person FROM achilles_results JOIN concept on cast(stratum_1 as BIGINT)=concept_id WHERE analysis_id in (202, 401, 601, 701, 801, 901, 1001, 1801) GROUP BY analysis_id,stratum_1,data_source_id,concept_name,domain_id) ) as q1 INNER JOIN public.data_source AS source ON q1.data_source_id=source.id GROUP BY q1.concept_id,q1.concept_name,q1.domain_id,source.name, acronym ORDER BY &quot;Person_count&quot; desc 8.3.1 Chart settings Data Tab Datasource &amp; Chart Type Visualization Type: Table Time Time range: No filter Query Query Mode: Raw Records Columns: source_name, concept_id, concept_name, domain_id, magnitude_persons, magnitude_occurrences Customize Tab Options Table Timestamps Format: %Y-%m-%d %H:%M:%S | 2019-01-14 01:32:10 Page Length: 50 Search Box: on Emit Filter Events: on "],["provenance.html", "Chapter 9 Provenance 9.1 Concepts General Tab 9.2 Concepts Domains Tab", " Chapter 9 Provenance This chapter follows a different organization due to the reuse of the same query in several charts. 9.1 Concepts General Tab This tab uses an unique query and all the filters and charts were created using the same output. Therefore, this dashboard is composed by two filters, one big number, two bar charts and one table. The filters were splitted in order to apply the filtering of one over the other one. Figure 9.1 shows this dashboards layout. Figure 9.1: Distribution of charts on the dashboard. 9.1.1 SQL query SELECT q1.concept_id AS concept_id, q1.concept_name AS concept_name, q1.domain_id, source.name, sum(q1.count_value) AS &quot;Occurrence_count&quot;, sum(q1.count_person) AS &quot;Person_count&quot;, CASE WHEN sum(q1.count_value)&lt;=10 THEN &#39;&lt;=10&#39; WHEN sum(q1.count_value)&lt;=100 THEN &#39;11-102&#39; WHEN sum(q1.count_value)&lt;=1000 THEN &#39;102-103&#39; WHEN sum(q1.count_value)&lt;=10000 THEN &#39;103-104&#39; WHEN sum(q1.count_value)&lt;=100000 THEN &#39;104-105&#39; WHEN sum(q1.count_value)&lt;=1000000 THEN &#39;105-106&#39; ELSE &#39;&gt;106&#39; END AS &quot;magnitude_occurrences&quot;, CASE WHEN sum(q1.count_person)&lt;=10 THEN &#39;&lt;=10&#39; WHEN sum(q1.count_person)&lt;=100 THEN &#39;11-102&#39; WHEN sum(q1.count_person)&lt;=1000 THEN &#39;102-103&#39; WHEN sum(q1.count_person)&lt;=10000 THEN &#39;103-104&#39; WHEN sum(q1.count_person)&lt;=100000 THEN &#39;104-105&#39; WHEN sum(q1.count_person)&lt;=1000000 THEN &#39;105-106&#39; ELSE &#39;&gt;106&#39; END AS &quot;magnitude_persons&quot; FROM (SELECT analysis_id, stratum_1 concept_id, data_source_id, concept_name, domain_id, count_value, 0 AS count_person FROM achilles_results JOIN concept ON cast(stratum_1 AS BIGINT)=concept_id WHERE analysis_id in (201, 301, 401, 601, 701, 801, 901, 1001, 1801) UNION (SELECT analysis_id, stratum_1 concept_id, data_source_id, concept_name, domain_id, 0 AS count_value, sum(count_value) AS count_person FROM achilles_results JOIN concept on cast(stratum_1 AS BIGINT)=concept_id WHERE analysis_id in (202, 401, 601, 701, 801, 901, 1001, 1801) GROUP BY analysis_id, stratum_1, data_source_id, concept_name, domain_id) ) AS q1 INNER JOIN public.data_source AS source ON q1.data_source_id=source.id GROUP BY q1.concept_id, q1.concept_name, q1.domain_id,source.name; 9.1.2 Charts 9.1.2.1 Entity Type Filter This filter, which is a type of chart in Superset, was designed to be used in the dashboard aiming the filtering of the data based on the field domain_id from the table concept. The main characteristics of this filter are presented in Figure 9.2, being the following: Data Tab: Visualization Type: Filter Box Time range: No filter Metrics: Filters - Column: domain_id Filters - Label: Entity Type Data Filter: Not checked Row limit: Empty Contribution: Not checked Instant Filtering: Checked Show SQL Granularity Dropdown: Not checked Show Druid Granularity Dropdown: Not checked Show SQL Time Column: Not checked Show Druid Time Origin: Not checked Limit Selector Values: Empty Figure 9.2: Settings for creating the database entity type filter. 9.1.2.2 Concept Filter Similar to the previous filter, this was designed to be used in the dashboard aiming the filtering of the data based on the field concept_name from the table concept. The main characteristics of this filter are presented in Figure 9.3, being the following: Data Tab: Visualization Type: Filter Box Time range: No filter Metrics: Filters - Column: concept_name Filters - Label: Concept Data Filter: Not checked Row limit: Empty Contribution: Not checked Instant Filtering: Checked Show SQL Granularity Dropdown: Not checked Show Druid Granularity Dropdown: Not checked Show SQL Time Column: Not checked Show Druid Time Origin: Not checked Limit Selector Values: Empty Figure 9.3: Settings for creating the concept filter. 9.1.2.3 Number of Concepts Discuss what is important to see in this chart TO DO The main characteristics of this chart are presented in Figure ??, being the following: Data Tab: Visualization Type: Bar Chart Time range: No filter Metrics: Filters: Empty Series: Breakdowns: Row limit: Empty Contribution: Not checked Costumize Tab: Y Axis Label: X Axis Label: Legend: Checked Stacked Bars: Bar Values: Sort Bars: Extra Controls: Reduce X ticks: Figure 9.4: Settings for creating chart representing the number of patients at the start of their observation period (bar chart). Image changed to contain information hidden in the customize menu. 9.1.2.4 Concept Browser Table The main characteristics of this chart are presented in Figure ??, being the following: Data Tab: Visualization Type: Bar Chart Time range: No filter Metrics: Filters: Empty Series: Breakdowns: Row limit: Empty Contribution: Not checked Costumize Tab: Y Axis Label: X Axis Label: Legend: Checked Stacked Bars: Bar Values: Sort Bars: Extra Controls: Reduce X ticks: Figure 9.5: Settings for creating chart representing the number of patients at the start of their observation period (bar chart). Image changed to contain information hidden in the customize menu. 9.1.2.5 # of Occurrences The main characteristics of this chart are presented in Figure ??, being the following: Data Tab: Visualization Type: Bar Chart Time range: No filter Metrics: Filters: Empty Series: Breakdowns: Row limit: Empty Contribution: Not checked Costumize Tab: Y Axis Label: X Axis Label: Legend: Checked Stacked Bars: Bar Values: Sort Bars: Extra Controls: Reduce X ticks: Figure 9.6: Settings for creating chart representing the number of patients at the start of their observation period (bar chart). Image changed to contain information hidden in the customize menu. 9.1.2.6 # of Patients The main characteristics of this chart are presented in Figure ??, being the following: Data Tab: Visualization Type: Bar Chart Time range: No filter Metrics: Filters: Empty Series: Breakdowns: Row limit: Empty Contribution: Not checked Costumize Tab: Y Axis Label: X Axis Label: Legend: Checked Stacked Bars: Bar Values: Sort Bars: Extra Controls: Reduce X ticks: Figure 9.7: Settings for creating chart representing the number of patients at the start of their observation period (bar chart). Image changed to contain information hidden in the customize menu. 9.2 Concepts Domains Tab This tab is composed of six bar charts that show the percentage of existent concepts in each database. These charts are similar but divided by the concept domains existent in the standard vocabularies, which are the conditions, procedures, drugs, observations, measurements and devices. Figure 9.8 shows this dashboards layout. Figure 9.8: Distribution of charts on the dashboard. 9.2.1 SQL query -- Concepts Domains SELECT source.name, CASE WHEN analysis_id = 405 THEN &#39;Condition&#39; WHEN analysis_id = 605 THEN &#39;Procedure&#39; WHEN analysis_id = 705 THEN &#39;Drug&#39; WHEN analysis_id = 805 THEN &#39;Observation&#39; WHEN analysis_id = 1805 THEN &#39;Measurement&#39; WHEN analysis_id = 2105 THEN &#39;Device&#39; ELSE &#39;Other&#39; END AS domain_name, concept_name, sum(count_value) AS num_records FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN public.concept AS c1 ON stratum_2 = CAST(concept_id AS text) WHERE analysis_id IN (405, 605, 705, 805, 1805, 2105) GROUP BY source.name, concept_name, CASE WHEN analysis_id = 405 THEN &#39;Condition&#39; WHEN analysis_id = 605 THEN &#39;Procedure&#39; WHEN analysis_id = 705 THEN &#39;Drug&#39; WHEN analysis_id = 805 THEN &#39;Observation&#39; WHEN analysis_id = 1805 THEN &#39;Measurement&#39; WHEN analysis_id = 2105 THEN &#39;Device&#39; ELSE &#39;Other&#39; END 9.2.2 Chart settings The difference between the six charts related to concept domains is the condition in the filter. Therefore, to create all the charts of this dashboard, it is necessary to follow the main characteristics presented in Figure 9.9 and the list of possible values for the filter. Those characteristics are the following: Data Tab: Visualization Type: Bar Chart Time range: No filter Metrics: SUM(num_records) as Nr Records Filters: domain = See filter list Series: name Breakdowns: concept_name Row limit: Empty Contribution: Checked Costumize Tab: Y Axis Label: X Axis Label: Legend: Checked Stacked Bars: Checked Bar Values: Not checked Sort Bars: Not checked Extra Controls: Not checked Reduce X ticks: Not checked Filter List: Concepts - Condition Types: Condition Concepts - Procedure Types: Procedure Concepts - Drug Types: Drug Concepts - Observation Types: Observation Concepts - Measurement Types: Measurement Concepts - Device Types: Device Figure 9.9: Settings for creating all the charts related with the concept domains for each databases (bar chart). Image changed to contain information hidden in the customize menu. "],["data-domains.html", "Chapter 10 Data Domains 10.1 Data Domains - Number of Records per Peson", " Chapter 10 Data Domains In this dashboard is present the Database Type Filter, that was detailed in the Chapter General. 10.1 Data Domains - Number of Records per Peson 10.1.1 SQL query -- 201, 401, 501, 601, 701, 801, 1801, 2101, 2201 -- Data domains - Number of records per peson SELECT source.name, CASE WHEN analysis_id = 201 THEN &#39;Visit&#39; WHEN analysis_id = 401 THEN &#39;Condition&#39; WHEN analysis_id = 501 THEN &#39;Death&#39; WHEN analysis_id = 601 THEN &#39;Procedure&#39; WHEN analysis_id = 701 THEN &#39;Drug Exposure&#39; WHEN analysis_id = 801 THEN &#39;Observation&#39; WHEN analysis_id = 1801 THEN &#39;Measurement&#39; WHEN analysis_id = 2101 THEN &#39;Device&#39; WHEN analysis_id = 2201 THEN &#39;Note&#39; END AS Data_Domain, SUM(count_value) /AVG(num_persons) AS &quot;Records per person&quot;, source.slug FROM public.achilles_results AS achilles INNER JOIN public.data_source AS source ON achilles.data_source_id=source.id INNER JOIN ( SELECT data_source_id , count_value AS num_persons FROM achilles_results WHERE analysis_id = 1 ) counts ON achilles.data_source_id = counts.data_source_id GROUP BY analysis_id, source.name, source.slug HAVING analysis_id IN (201, 401, 501, 601, 701, 801, 1801, 2101, 2201) 10.1.2 Chart settings The main characteristics of this chart are presented in Figure 10.1, being the following: Data Tab: Visualization Type: Heatmap Time range: No filter X: name Y: data_domain Metric: SUM(records_per_person) as Sum of records per person Filters: Empty Row limit: Empty Legend: Checked Show percentage: Checked Show Values: Not checked Normalized: Not checked Figure 10.1: Settings for creating chart representing the number of records per patient in the different data domains (heatmap). Image changed to contain information hidden in the customize menu. "]]
